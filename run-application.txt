***********************************************************************************************************************
Note :- Even though we have not mentioned in the following methods that we need to create "jar" for each microservices
used in the application but we will need them. For example for "Kafka-consumer", "kafka-admin" etc. microservices, we
haven't mentioned that we need "jars" for these microservices in the following methods. So if you make changes in these
microservices then run "mvn clean install" command to create runnable jars for them. If you pull the code on any other
machine and want to run application on that then create runnable jars for each and every microservices. For example we
can create runnable jar for "kafka-consumer" as follows :
--------------------------------
cd kafka-consumer/
mvn clean install
--------------------------------
***********************************************************************************************************************

Method 1(Easy Method):-
cd config-server
mvn clean install

cd twitter-to-kafka-service
mvn clean install -DskipTests

cd docker-compose
docker-compose up -d

If due to any reason the above containers are not running then delete all containers using following command and
  docker-compose down -v
Now again start all kafka containers using following command :

To check all containers are running :
docker ps -a

cd kafka-to-elastic-service/
mvn clean install
mvn spring-boot:run

To monitor any container :-
docker logs -f <container_id>
Note :- "twitter-to-kafka-service" will take some time in starting, so monitor it if it is ready or not.

Command to kill process running on a port:
kill -9 $(lsof -t -i:8080)
Replace 8080 with your desired PORT number.

You also refer to Step 4 of Method 2 to monitor kafka cluster.
=====================================================================================================================
Method 2(Detailed -> without using - "services.yml" in docker-compose) :-
Step 1:-
========
Start the config-server using commands :
  cd config-server
  mvn clean install
  mvn spring-boot:run

Step 2:-
========
Start kafka cluster(don't include services.yml here):
  cd docker-compose
  docker-compose -f common.yml -f kafka_cluster.yml up -d

Notes :-
1.)
After running above command check whether all 5 kafka related containers(1 zookeeper container, 1 schema-registry
container and 3 kafka containers) are running properly or not using following commands :
  docker ps
Or,
  docker ps -a
If due to any reason the above containers are not running then delete all containers using following command and
  docker-compose down -v
Now again start all kafka containers using following command :
  docker-compose -f common.yml -f kafka_cluster.yml up -d
It should work fine now.
2.)
  Note that we need to run "common.yml" file with every other yaml files as it defines the network for the container.
  If you don't add it then you may get "unknown network" error. For example :- let's suppose you want to run
  "service.yml" file using docker-compose, then you can do it as follows :
  docker-compose  -f common.yml -f services.yml up -d

Step 3 :-
========
(Note :- Run if you haven't run "twitter-to-kafka-service" container docker-compose using "services.yml" file otherwise skip.)
  cd twitter-to-kafka-service
  mvn clean install
  mvn spring-boot:run

Step 4:-
========
Check whether kafka is getting messages from "twitter-to-kafka-service" or not :
Command 1:-
To check all brokers and topics of kafka cluster particularly if "twitter-topic" is created or not.
  kafkacat -L -b localhost:19092
Command 2:-
To check if kafka cluster is consuming messages from "twitter-to-kafka-service" continuously on some intervals or not.
  kafkacat -C -b localhost:19092 -t twitter-topic

