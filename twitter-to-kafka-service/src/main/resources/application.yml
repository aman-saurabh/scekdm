twitter-to-kafka-service:
  twitter-keywords:
    - Java
    - Microservices
    - Spring
    - Kafka
    - Elasticsearch
  #We will use 'enable-v2-tweets' to load our V2 twitter implementation instead of the old Twitter4J implementation.
  enable-v2-tweets: false
  enable-mock-tweets: true
  #This url will be used to stream data from twitter. Here we also added tweet.fields as created_at and expansions as
  #author_id because we want to use the same fields that we were using with Twitter4J Library. So we will get
  #createdAt and user id fields using this URL.This author Id will give us the user Id.
  twitter-v2-base-url: https://api.twitter.com/2/tweets/search/stream?tweet.fields=created_at&expansions=author_id
  #This url will be used to set the rules for our stream. So actually, We will set our filtered keywords using this
  #rules end point and then start streaming data using the base url. We will use the same bearer token for both end
  #points. So Twitter API will remember our rules when we call the base URL to stream the tweets.
  twitter-v2-rules-base-url: https://api.twitter.com/2/tweets/search/stream/rules
  twitter-v2-bearer-token: ${TWITTER_BEARER_TOKEN}
  #Here note that we have not provided the token value directly. Instead, we give the reference to an environment variable.
  #We can set the environment variable using the terminal(inside the project directory) as follows :
  #export TWITTER_BEARER_TOKEN=<Your bearer token>
  #Don't know why but using environment variable here is not working so use value directly i.e. as follows :
  #twitter-v2-bearer-token: <Actual_twitter_bearer_token>
  # However if you have set enable-v2-tweets as false and enable-mock-tweets as true, then the mock tweet implementation
  # will work and v2 implementation won't work. So in that case you don't need to set "twitter-v2-bearer-token" but if
  # you are using v2 implementation then you will need to set "twitter-v2-bearer-token" value.
  mock-min-tweet-length: 5
  mock-max-tweet-length: 15
  mock-sleep-ms: 10000
retry-config:
  initial-interval-ms: 1000
  max-interval-ms: 10000
  multiplier: 2.0
  max-attempts: 3
  sleep-time-ms: 2000
kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  topic-name: twitter-topic
  topic-names-to-create:
    - twitter-topic
  num-of-partitions: 3
  replication-factor: 3