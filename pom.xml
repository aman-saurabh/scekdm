<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.tp</groupId>
    <artifactId>scekdm</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>scekdm</name>
    <description>Demo project for spring Boot, spring cloud, elasticsearch, kafka, docker and event driven microservices.
    </description>
    <modules>
        <module>twitter-to-kafka-service</module>
        <module>app-config-data</module>
        <module>kafka</module>
        <module>kafka/kafka-model</module>
        <module>kafka/kafka-admin</module>
        <module>kafka/kafka-producer</module>
        <module>common-config</module>
        <module>config-server</module>
        <module>kafka/kafka-consumer</module>
        <module>kafka-to-elastic-service</module>
    </modules>
    <!-- We are using this POM file as base configuration only and not for creating runnable jars. So we have
    defined "packaging" as "pom" here. -->
    <packaging>pom</packaging>
    <properties>
        <java.version>17</java.version>
        <spring-boot.version>3.0.1</spring-boot.version>
        <maven-compiler-plugin.version>3.10.1</maven-compiler-plugin.version>
        <twitter4j-stream.version>4.0.7</twitter4j-stream.version>
        <lombok.version>1.18.24</lombok.version>
        <httpclient.version>4.5.14</httpclient.version>
        <json.version>20220924</json.version>
        <avro.version>1.11.1</avro.version>
        <spring-kafka.version>3.0.1</spring-kafka.version>
        <spring-retry.version>2.0.0</spring-retry.version>
        <spring-boot-starter-webflux.version>3.0.2</spring-boot-starter-webflux.version>
        <kafka-avro-serializer.version>7.3.1</kafka-avro-serializer.version>
        <spring-cloud.version>4.0.1</spring-cloud.version>
        <spring-cloud-dependencies.version>2022.0.1</spring-cloud-dependencies.version>
    </properties>
    <repositories>
        <repository>
            <id>confluent</id>
            <url>https://packages.confluent.io/maven/</url>
        </repository>
    </repositories>

    <!-- We have created "dependencyManagement" section and shifted the "dependencies" section inside this
    "dependencyManagement" section because it will help us to define all dependencies in this base pom.xml file
    without really downloading them. In the submodules that wants to include the dependency, we will simply
    overwrite the dependencies section in the module itself. We have defined the dependency version in this file
    so that submodules will just include the dependency without specifying the version.-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.tp</groupId>
                <artifactId>app-config-data</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.tp</groupId>
                <artifactId>common-config</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.tp</groupId>
                <artifactId>kafka-model</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.tp</groupId>
                <artifactId>kafka-admin</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.tp</groupId>
                <artifactId>kafka-producer</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.tp</groupId>
                <artifactId>kafka-consumer</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <version>${spring-boot.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.twitter4j/twitter4j-stream -->
            <dependency>
                <groupId>org.twitter4j</groupId>
                <artifactId>twitter4j-stream</artifactId>
                <version>${twitter4j-stream.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <!--Lombok is a compile-only tool which is not required at runtime. So that why we have used "provided"
                scope here for this dependency.-->
                <scope>provided</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.json/json -->
            <dependency>
                <groupId>org.json</groupId>
                <artifactId>json</artifactId>
                <version>${json.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.avro/avro -->
            <dependency>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro</artifactId>
                <version>${avro.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka -->
            <dependency>
                <groupId>org.springframework.kafka</groupId>
                <artifactId>spring-kafka</artifactId>
                <version>${spring-kafka.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.springframework.retry/spring-retry -->
            <dependency>
                <groupId>org.springframework.retry</groupId>
                <artifactId>spring-retry</artifactId>
                <version>${spring-retry.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-webflux</artifactId>
                <version>${spring-boot-starter-webflux.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/io.confluent/kafka-avro-serializer -->
            <dependency>
                <!-- This repository is located at confluent repository, not in Maven Central Repository. So we need to
                create a new repository in the repositories section of main pom.xml file. And then mentioned the
                confluent url to be able to download this dependency from Confluent repository. We can also set this
                repository in the Maven setting xml file But we will leave it here for now. -->
                <groupId>io.confluent</groupId>
                <artifactId>kafka-avro-serializer</artifactId>
                <version>${kafka-avro-serializer.version}</version>
                <!-- We need to add some exclusions to Kafka avro serializer dependency for slF4j, lof4j and swagger
                because we don't want to use these dependencies from Kafka Avro Serializer library. -->
                <exclusions>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>io.swagger</groupId>
                        <artifactId>swagger-annotations</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>io.swagger</groupId>
                        <artifactId>swagger-core</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-config-server -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-config-server</artifactId>
                <version>${spring-cloud.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-config -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-config</artifactId>
                <version>${spring-cloud.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <!-- Similar to dependencyManagement section, we have created "pluginManagement" section also here and shifted the
        "plugins" section containing 'spring-boot-maven-plugin' inside it. Any submodule that wants to include this plugin
        will simply create a plugin section in the module itself, without setting the version but by setting any property
        or goal for this task specifically-->
        <pluginManagement>
            <plugins>
                <!--"spring-boot-maven-plugin" is used to create executable archive files such as jar files or war
                files that contained all application dependencies and can be run with a single java jar command. This
                behaviour comes just by including the plugin itself, because it is pre-configured to create the target
                runnable jar. In addition, this plugin also runs spring boot applications generate build information
                and start your spring-boot applications prior to running integration test. And finally it also created
                docker images with the 'build image goal' which comes with spring boot 2.3.0 release or higher. We will
                actually be using this property to create docker images for our microservices.-->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <!-- We also need another plugin here which is called maven-compiler-plugin. Actually by default maven
            uses java 1.6 version for source and target settings. But since we are using java 17, so we will use
            maven-compiler-plugin to set the java version 17 for the source and target settings. Note that we have
            not kept it inside the "pluginManagement" section as we need this plugin application-wise, so that we can
            define it here to be used in submodules without needed to override-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <!--<source>1.8</source>-->
                    <!--<target>1.8</target>-->
                    <!-- From java version 9 and above "source" and "target" properties are replaced by "release" property -->
                    <release>${java.version}</release>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
